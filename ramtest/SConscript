# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2012 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Import all required objects and modules.
#
import os.path
Import('atEnv')


#----------------------------------------------------------------------------
# This is the list of sources. The elements must be separated with whitespace
# (i.e. spaces, tabs, newlines). The amount of whitespace does not matter.
sources_common = """
	src/header.c
	src/progress.c
	src/ramtest.c
	src/setup_sdram.c
"""

sources_arm_assembler = """
	src/performance_test.S
	src/ramtest_perf.c
	src/random_burst.s
"""

sources_test = """
	src/init_netx_test.S
	src/main_test.c
"""

sources_standalone = """
	src/init_standalone.S
	src/main_standalone.c
	src/standalone_parameter.c
"""

sources_standalone_netx4000 = """
	src/netx4000/init_standalone_cr7.S
	src/main_standalone_netx4000.c
	src/main_standalone_common.c
"""

# special files for netX 4000 bootup
sources_cr7_openfirewalls = """
	src/netx4000/cr7_open_netx4000_firewalls.S
"""


#----------------------------------------------------------------------------
#
# Build the muhkuh test version.
#
aCppPath = ['src', '#platform/src', '#platform/src/lib', '#targets/version']


env_netx4000_relaxed_t = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_relaxed_t.Replace(LDFILE = 'src/netx4000/netx4000_cr7_llram.ld')
env_netx4000_relaxed_t.Append(CPPPATH = aCppPath)
src_netx4000_relaxed_t = env_netx4000_relaxed_t.SetBuildPath('targets/netx4000_relaxed/muhkuh_test', 'src', sources_common+sources_arm_assembler+sources_test)
elf_netx4000_relaxed_t = env_netx4000_relaxed_t.Elf('targets/netx4000_relaxed/muhkuh_test/ramtest.elf', src_netx4000_relaxed_t + env_netx4000_relaxed_t['PLATFORM_LIBRARY'])
ramtest_netx4000_relaxed = env_netx4000_relaxed_t.ObjCopy('targets/netx4000_relaxed/muhkuh_test/ramtest_netx4000_relaxed.bin', elf_netx4000_relaxed_t)

env_netx4000_t = atEnv.NETX4000.Clone()
env_netx4000_t.Replace(LDFILE = 'src/netx4000/netx4000_cr7_llram.ld')
env_netx4000_t.Append(CPPPATH = aCppPath)
src_netx4000_t = env_netx4000_t.SetBuildPath('targets/netx4000/muhkuh_test', 'src', sources_common+sources_arm_assembler+sources_test)
elf_netx4000_t = env_netx4000_t.Elf('targets/netx4000/muhkuh_test/ramtest.elf', src_netx4000_t + env_netx4000_t['PLATFORM_LIBRARY'])
ramtest_netx4000 = env_netx4000_t.ObjCopy('targets/netx4000/muhkuh_test/ramtest_netx4000.bin', elf_netx4000_t)

env_netx500_t = atEnv.NETX500.Clone()
env_netx500_t.Replace(LDFILE = 'src/netx500/netx500.ld')
env_netx500_t.Append(CPPPATH = aCppPath)
src_netx500_t = env_netx500_t.SetBuildPath('targets/netx500/muhkuh_test', 'src', sources_common+sources_arm_assembler+sources_test)
elf_netx500_t = env_netx500_t.Elf('targets/netx500/muhkuh_test/ramtest.elf', src_netx500_t + env_netx500_t['PLATFORM_LIBRARY'])
ramtest_netx500 = env_netx500_t.ObjCopy('targets/netx500/muhkuh_test/ramtest_netx500.bin', elf_netx500_t)

env_netx90_mpw_t = atEnv.NETX90_MPW.Clone()
env_netx90_mpw_t.Replace(LDFILE = 'src/netx90/netx90.ld')
env_netx90_mpw_t.Append(CPPPATH = aCppPath)
src_netx90_mpw_t = env_netx90_mpw_t.SetBuildPath('targets/netx90_mpw/muhkuh_test', 'src', sources_common+sources_test)
elf_netx90_mpw_t = env_netx90_mpw_t.Elf('targets/netx90_mpw/muhkuh_test/ramtest.elf', src_netx90_mpw_t + env_netx90_mpw_t['PLATFORM_LIBRARY'])
ramtest_netx90_mpw = env_netx90_mpw_t.ObjCopy('targets/netx90_mpw/muhkuh_test/ramtest_netx90_mpw.bin', elf_netx90_mpw_t)

env_netx90_t = atEnv.NETX90.Clone()
env_netx90_t.Replace(LDFILE = 'src/netx90/netx90.ld')
env_netx90_t.Append(CPPPATH = aCppPath)
src_netx90_t = env_netx90_t.SetBuildPath('targets/netx90/muhkuh_test', 'src', sources_common+sources_test)
elf_netx90_t = env_netx90_t.Elf('targets/netx90/muhkuh_test/ramtest.elf', src_netx90_t + env_netx90_t['PLATFORM_LIBRARY'])
ramtest_netx90 = env_netx90_t.ObjCopy('targets/netx90/muhkuh_test/ramtest_netx90.bin', elf_netx90_t)

env_netx56_t = atEnv.NETX56.Clone()
env_netx56_t.Replace(LDFILE = 'src/netx56/netx56.ld')
env_netx56_t.Append(CPPPATH = aCppPath)
src_netx56_t = env_netx56_t.SetBuildPath('targets/netx56/muhkuh_test', 'src', sources_common+sources_arm_assembler+sources_test)
elf_netx56_t = env_netx56_t.Elf('targets/netx56/muhkuh_test/ramtest.elf', src_netx56_t + env_netx56_t['PLATFORM_LIBRARY'])
ramtest_netx56 = env_netx56_t.ObjCopy('targets/netx56/muhkuh_test/ramtest_netx56.bin', elf_netx56_t)

env_netx50_t = atEnv.NETX50.Clone()
env_netx50_t.Replace(LDFILE = 'src/netx50/netx50.ld')
env_netx50_t.Append(CPPPATH = aCppPath)
src_netx50_t = env_netx50_t.SetBuildPath('targets/netx50/muhkuh_test', 'src', sources_common+sources_arm_assembler+sources_test)
elf_netx50_t = env_netx50_t.Elf('targets/netx50/muhkuh_test/ramtest.elf', src_netx50_t + env_netx50_t['PLATFORM_LIBRARY'])
ramtest_netx50 = env_netx50_t.ObjCopy('targets/netx50/muhkuh_test/ramtest_netx50.bin', elf_netx50_t)

env_netx10_t = atEnv.NETX10.Clone()
env_netx10_t.Replace(LDFILE = 'src/netx10/netx10.ld')
env_netx10_t.Append(CPPPATH = aCppPath)
src_netx10_t = env_netx10_t.SetBuildPath('targets/netx10/muhkuh_test', 'src', sources_common+sources_arm_assembler+sources_test)
elf_netx10_t = env_netx10_t.Elf('targets/netx10/muhkuh_test/ramtest.elf', src_netx10_t + env_netx10_t['PLATFORM_LIBRARY'])
ramtest_netx10 = env_netx10_t.ObjCopy('targets/netx10/muhkuh_test/ramtest_netx10.bin', elf_netx10_t)

Export('ramtest_netx4000_relaxed', 'ramtest_netx4000', 'ramtest_netx500', 'ramtest_netx90_mpw', 'ramtest_netx90', 'ramtest_netx56', 'ramtest_netx50', 'ramtest_netx10')




#----------------------------------------------------------------------------
#
# Build the standalone version. 
#
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# auxiliary routines
#----------------------------------------------------------------------------

# open firewalls on cr7
env_netx4000_cr7_openfirewalls = atEnv.NETX4000_RELAXED.Clone()
env_netx4000_cr7_openfirewalls.Replace(LDFILE = 'src/netx4000/netx4000_cr7_llram.ld')
env_netx4000_cr7_openfirewalls.Append(CPPPATH = aCppPath)
src_netx4000_cr7_openfirewalls = env_netx4000_cr7_openfirewalls.SetBuildPath('targets/netx4000_openfirewalls', 'src', sources_cr7_openfirewalls)
elf_netx4000_cr7_openfirewalls = env_netx4000_cr7_openfirewalls.Elf('targets/netx4000_openfirewalls/netx4000_cr7_openfirewalls.elf', src_netx4000_cr7_openfirewalls)
txt_netx4000_cr7_openfirewalls = env_netx4000_cr7_openfirewalls.ObjDump('targets/netx4000_openfirewalls/netx4000_cr7_openfirewalls.txt', elf_netx4000_cr7_openfirewalls, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])


#############################################################################################################
# Standalone version

# Build a netX4000 ramtest.
env_netx4000_s = atEnv.NETX4000.Clone()
env_netx4000_s.Replace(LDFILE = 'src/netx4000/netx4000_cr7_llram.ld')
env_netx4000_s.Append(CPPPATH = aCppPath)
env_netx4000_s.Append(CPPDEFINES = [['CPU_CR7', '1']])
src_netx4000_s = env_netx4000_s.SetBuildPath('targets/netx4000/standalone', 'src', sources_common+sources_arm_assembler+sources_standalone)
elf_netx4000_s = env_netx4000_s.Elf('targets/netx4000/standalone/ramtest_netx4000.elf', src_netx4000_s + env_netx4000_s['PLATFORM_LIBRARY'])
ramtest_standalone_netx4000 = env_netx4000_s.HBootImage('targets/netx4000/standalone/ramtest_standalone_netx4000.img', 'src/netx4000/CR7_to_INTRAM.xml', HBOOTIMAGE_KNOWN_FILES=dict({'tElfCR7': elf_netx4000_s}))

env_netx500_s = atEnv.NETX500.Clone()
env_netx500_s.Replace(LDFILE = 'src/netx500/netx500.ld')
env_netx500_s.Append(CPPPATH = aCppPath)
src_netx500_s = env_netx500_s.SetBuildPath('targets/netx500/standalone', 'src', sources_common+sources_arm_assembler+sources_standalone)
elf_netx500_s = env_netx500_s.Elf('targets/netx500/standalone/ramtest_netx500.elf', src_netx500_s + env_netx500_s['PLATFORM_LIBRARY'])
ramtest_standalone_netx500 = env_netx500_s.BootBlock('targets/netx500/standalone/ramtest_standalone_netx500.img', elf_netx500_s, BOOTBLOCK_SRC='SPI_GEN_10', BOOTBLOCK_DST='INTRAM')


# Build a netX90 standalone RAM test.
env_netx90_s = atEnv.NETX90.Clone()
env_netx90_s.Replace(LDFILE = 'src/netx90/netx90.ld')
env_netx90_s.Append(CPPPATH = aCppPath)
src_netx90_s = env_netx90_s.SetBuildPath('targets/netx90/standalone', 'src', sources_common+sources_standalone)
elf_netx90_s = env_netx90_s.Elf('targets/netx90/standalone/ramtest.elf', src_netx90_s + env_netx90_s['PLATFORM_LIBRARY'])
ramtest_standalone_netx90 = env_netx90_s.HBootImage('targets/netx90/standalone/ramtest_standalone_netx90.img', 'src/netx90/COM_to_INTRAM.xml', HBOOTIMAGE_KNOWN_FILES=dict({'tElfCOM': elf_netx90_s}))


env_netx56_s = atEnv.NETX56.Clone()
env_netx56_s.Replace(LDFILE = 'src/netx56/netx56.ld')
env_netx56_s.Append(CPPPATH = aCppPath)
src_netx56_s = env_netx56_s.SetBuildPath('targets/netx56/standalone', 'src', sources_common+sources_arm_assembler+sources_standalone)
elf_netx56_s = env_netx56_s.Elf('targets/netx56/standalone/ramtest_netx56.elf', src_netx56_s + env_netx56_s['PLATFORM_LIBRARY'])
ramtest_standalone_netx56 = env_netx56_s.BootBlock('targets/netx56/standalone/ramtest_standalone_netx56.img', elf_netx56_s, BOOTBLOCK_SRC={}, BOOTBLOCK_DST={})


env_netx50_s = atEnv.NETX50.Clone()
env_netx50_s.Replace(LDFILE = 'src/netx50/netx50.ld')
env_netx50_s.Append(CPPPATH = aCppPath)
src_netx50_s = env_netx50_s.SetBuildPath('targets/netx50/standalone', 'src', sources_common+sources_arm_assembler+sources_standalone)
elf_netx50_s = env_netx50_s.Elf('targets/netx50/standalone/ramtest_netx50.elf', src_netx50_s + env_netx50_s['PLATFORM_LIBRARY'])
ramtest_standalone_netx50 = env_netx50_s.BootBlock('targets/netx50/standalone/ramtest_standalone_netx50.img', elf_netx50_s, BOOTBLOCK_SRC={}, BOOTBLOCK_DST={})


env_netx10_s = atEnv.NETX10.Clone()
env_netx10_s.Replace(LDFILE = 'src/netx10/netx10.ld')
env_netx10_s.Append(CPPPATH = aCppPath)
src_netx10_s = env_netx10_s.SetBuildPath('targets/netx10/standalone', 'src', sources_common+sources_arm_assembler+sources_standalone)
elf_netx10_s = env_netx10_s.Elf('targets/netx10/standalone/ramtest_netx10.elf', src_netx10_s + env_netx10_s['PLATFORM_LIBRARY'])
ramtest_standalone_netx10 = env_netx10_s.BootBlock('targets/netx10/standalone/ramtest_standalone_netx10.img', elf_netx10_s, BOOTBLOCK_SRC={}, BOOTBLOCK_DST={})


Export('ramtest_standalone_netx4000', 'ramtest_standalone_netx500', 'ramtest_standalone_netx90', 'ramtest_standalone_netx56', 'ramtest_standalone_netx50', 'ramtest_standalone_netx10')
#Export('ramtest_standalone_cifx4000_sdram')
#Export('ramtest_standalone_nxhx4000_ddr3_400MHz_cr7')

#----------------------------------------------------------------------------
#
# Filter the LUA script.
# All versions have the same symbols. Take them from the netX500 version.
#
tRamtestLua = env_netx500_t.GccSymbolTemplate(os.path.join('targets', 'lua', 'ramtest.lua'), elf_netx500_t, GCCSYMBOLTEMPLATE_TEMPLATE=File('#/lua/ramtest.lua'))
Export('tRamtestLua')
